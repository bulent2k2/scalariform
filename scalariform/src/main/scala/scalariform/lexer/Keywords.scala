package scalariform.lexer

import scalariform.lexer.Tokens._

object Keywords {

  def apply(s: String): Option[TokenType] = keywords get s

  private val keywords = Map(
    "abstract" -> ABSTRACT,
    "case" -> CASE,
    "catch" -> CATCH,
    "class" -> CLASS,
    "def" -> DEF,
    "do" -> DO,
    "else" -> ELSE,
    "extends" -> EXTENDS,
    "false" -> FALSE,
    "final" -> FINAL,
    "finally" -> FINALLY,
    "for" -> FOR,
    "forSome" -> FORSOME,
    "if" -> IF,
    "implicit" -> IMPLICIT,
    "import" -> IMPORT,
    "lazy" -> LAZY,
    "match" -> MATCH,
    "new" -> NEW,
    "null" -> NULL,
    "object" -> OBJECT,
    "override" -> OVERRIDE,
    "package" -> PACKAGE,
    "private" -> PRIVATE,
    "protected" -> PROTECTED,
    "return" -> RETURN,
    "sealed" -> SEALED,
    "super" -> SUPER,
    "this" -> THIS,
    "throw" -> THROW,
    "trait" -> TRAIT,
    "try" -> TRY,
    "true" -> TRUE,
    "type" -> TYPE,
    "val" -> VAL,
    "var" -> VAR,
    "while" -> WHILE,
    "with" -> WITH,
    "yield" -> YIELD,
    "soyut" -> ABSTRACT,
    "durum" -> CASE,
    "yakala" -> CATCH,
    "sınıf" -> CLASS,
    "tanım" -> DEF,
    "yap" -> DO,
    "yoksa" -> ELSE,
    "yayar" -> EXTENDS,
    "yanlış" -> FALSE,
    "son" -> FINAL,
    "sonunda" -> FINALLY,
    "için" -> FOR,
    "bazı" -> FORSOME,
    "eğer" -> IF,
    "örtük" -> IMPLICIT,
    "getir" -> IMPORT,
    "miskin" -> LAZY,
    "eşle" -> MATCH,
    "yeni" -> NEW,
    "yok" -> NULL,
    "nesne" -> OBJECT,
    "baskın" -> OVERRIDE,
    "deste" -> PACKAGE,
    "gizli" -> PRIVATE,
    "koru" -> PROTECTED,
    "geriDön" -> RETURN,
    "damgalı" -> SEALED,
    "üst" -> SUPER,
    "bu" -> THIS,
    "bildir" -> THROW,
    "özellik" -> TRAIT,
    "dene" -> TRY,
    "doğru" -> TRUE,
    "tür" -> TYPE,
    "dez" -> VAL,
    "den" -> VAR,
    "yineleDoğruKaldıkça" -> WHILE,
    "birlikte" -> WITH,
    "ver" -> YIELD,
    "_" -> USCORE,
    ":" -> COLON,
    "=" -> EQUALS,
    "=>" -> ARROW,
    "<-" -> LARROW,
    "<:" -> SUBTYPE,
    "<%" -> VIEWBOUND,
    ">:" -> SUPERTYPE,
    "#" -> HASH,
    "@" -> AT,
    "." -> DOT,
    "+" -> PLUS,
    "-" -> MINUS,
    "*" -> STAR,
    "|" -> PIPE,
    "~" -> TILDE,
    "!" -> EXCLAMATION
  )

}
